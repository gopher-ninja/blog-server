// Code generated by ent, DO NOT EDIT.

package blog

import (
	"blog-server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldID, id))
}

// BlogId applies equality check predicate on the "blogId" field. It's identical to BlogIdEQ.
func BlogId(v uuid.UUID) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldBlogId, v))
}

// BlogTitle applies equality check predicate on the "blogTitle" field. It's identical to BlogTitleEQ.
func BlogTitle(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldBlogTitle, v))
}

// BlogContent applies equality check predicate on the "blogContent" field. It's identical to BlogContentEQ.
func BlogContent(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldBlogContent, v))
}

// BlogIdEQ applies the EQ predicate on the "blogId" field.
func BlogIdEQ(v uuid.UUID) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldBlogId, v))
}

// BlogIdNEQ applies the NEQ predicate on the "blogId" field.
func BlogIdNEQ(v uuid.UUID) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldBlogId, v))
}

// BlogIdIn applies the In predicate on the "blogId" field.
func BlogIdIn(vs ...uuid.UUID) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldBlogId, vs...))
}

// BlogIdNotIn applies the NotIn predicate on the "blogId" field.
func BlogIdNotIn(vs ...uuid.UUID) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldBlogId, vs...))
}

// BlogIdGT applies the GT predicate on the "blogId" field.
func BlogIdGT(v uuid.UUID) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldBlogId, v))
}

// BlogIdGTE applies the GTE predicate on the "blogId" field.
func BlogIdGTE(v uuid.UUID) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldBlogId, v))
}

// BlogIdLT applies the LT predicate on the "blogId" field.
func BlogIdLT(v uuid.UUID) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldBlogId, v))
}

// BlogIdLTE applies the LTE predicate on the "blogId" field.
func BlogIdLTE(v uuid.UUID) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldBlogId, v))
}

// BlogTitleEQ applies the EQ predicate on the "blogTitle" field.
func BlogTitleEQ(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldBlogTitle, v))
}

// BlogTitleNEQ applies the NEQ predicate on the "blogTitle" field.
func BlogTitleNEQ(v string) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldBlogTitle, v))
}

// BlogTitleIn applies the In predicate on the "blogTitle" field.
func BlogTitleIn(vs ...string) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldBlogTitle, vs...))
}

// BlogTitleNotIn applies the NotIn predicate on the "blogTitle" field.
func BlogTitleNotIn(vs ...string) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldBlogTitle, vs...))
}

// BlogTitleGT applies the GT predicate on the "blogTitle" field.
func BlogTitleGT(v string) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldBlogTitle, v))
}

// BlogTitleGTE applies the GTE predicate on the "blogTitle" field.
func BlogTitleGTE(v string) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldBlogTitle, v))
}

// BlogTitleLT applies the LT predicate on the "blogTitle" field.
func BlogTitleLT(v string) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldBlogTitle, v))
}

// BlogTitleLTE applies the LTE predicate on the "blogTitle" field.
func BlogTitleLTE(v string) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldBlogTitle, v))
}

// BlogTitleContains applies the Contains predicate on the "blogTitle" field.
func BlogTitleContains(v string) predicate.Blog {
	return predicate.Blog(sql.FieldContains(FieldBlogTitle, v))
}

// BlogTitleHasPrefix applies the HasPrefix predicate on the "blogTitle" field.
func BlogTitleHasPrefix(v string) predicate.Blog {
	return predicate.Blog(sql.FieldHasPrefix(FieldBlogTitle, v))
}

// BlogTitleHasSuffix applies the HasSuffix predicate on the "blogTitle" field.
func BlogTitleHasSuffix(v string) predicate.Blog {
	return predicate.Blog(sql.FieldHasSuffix(FieldBlogTitle, v))
}

// BlogTitleEqualFold applies the EqualFold predicate on the "blogTitle" field.
func BlogTitleEqualFold(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEqualFold(FieldBlogTitle, v))
}

// BlogTitleContainsFold applies the ContainsFold predicate on the "blogTitle" field.
func BlogTitleContainsFold(v string) predicate.Blog {
	return predicate.Blog(sql.FieldContainsFold(FieldBlogTitle, v))
}

// BlogContentEQ applies the EQ predicate on the "blogContent" field.
func BlogContentEQ(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEQ(FieldBlogContent, v))
}

// BlogContentNEQ applies the NEQ predicate on the "blogContent" field.
func BlogContentNEQ(v string) predicate.Blog {
	return predicate.Blog(sql.FieldNEQ(FieldBlogContent, v))
}

// BlogContentIn applies the In predicate on the "blogContent" field.
func BlogContentIn(vs ...string) predicate.Blog {
	return predicate.Blog(sql.FieldIn(FieldBlogContent, vs...))
}

// BlogContentNotIn applies the NotIn predicate on the "blogContent" field.
func BlogContentNotIn(vs ...string) predicate.Blog {
	return predicate.Blog(sql.FieldNotIn(FieldBlogContent, vs...))
}

// BlogContentGT applies the GT predicate on the "blogContent" field.
func BlogContentGT(v string) predicate.Blog {
	return predicate.Blog(sql.FieldGT(FieldBlogContent, v))
}

// BlogContentGTE applies the GTE predicate on the "blogContent" field.
func BlogContentGTE(v string) predicate.Blog {
	return predicate.Blog(sql.FieldGTE(FieldBlogContent, v))
}

// BlogContentLT applies the LT predicate on the "blogContent" field.
func BlogContentLT(v string) predicate.Blog {
	return predicate.Blog(sql.FieldLT(FieldBlogContent, v))
}

// BlogContentLTE applies the LTE predicate on the "blogContent" field.
func BlogContentLTE(v string) predicate.Blog {
	return predicate.Blog(sql.FieldLTE(FieldBlogContent, v))
}

// BlogContentContains applies the Contains predicate on the "blogContent" field.
func BlogContentContains(v string) predicate.Blog {
	return predicate.Blog(sql.FieldContains(FieldBlogContent, v))
}

// BlogContentHasPrefix applies the HasPrefix predicate on the "blogContent" field.
func BlogContentHasPrefix(v string) predicate.Blog {
	return predicate.Blog(sql.FieldHasPrefix(FieldBlogContent, v))
}

// BlogContentHasSuffix applies the HasSuffix predicate on the "blogContent" field.
func BlogContentHasSuffix(v string) predicate.Blog {
	return predicate.Blog(sql.FieldHasSuffix(FieldBlogContent, v))
}

// BlogContentEqualFold applies the EqualFold predicate on the "blogContent" field.
func BlogContentEqualFold(v string) predicate.Blog {
	return predicate.Blog(sql.FieldEqualFold(FieldBlogContent, v))
}

// BlogContentContainsFold applies the ContainsFold predicate on the "blogContent" field.
func BlogContentContainsFold(v string) predicate.Blog {
	return predicate.Blog(sql.FieldContainsFold(FieldBlogContent, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		p(s.Not())
	})
}
